// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        (unknown)
// source: proto/auth/v1/auth.proto

package authv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Supported identity providers
type IdentityProvider int32

const (
	IdentityProvider_IDENTITY_PROVIDER_UNSPECIFIED IdentityProvider = 0
	IdentityProvider_IDENTITY_PROVIDER_GOOGLE      IdentityProvider = 1
	IdentityProvider_IDENTITY_PROVIDER_GITHUB      IdentityProvider = 2
)

// Enum value maps for IdentityProvider.
var (
	IdentityProvider_name = map[int32]string{
		0: "IDENTITY_PROVIDER_UNSPECIFIED",
		1: "IDENTITY_PROVIDER_GOOGLE",
		2: "IDENTITY_PROVIDER_GITHUB",
	}
	IdentityProvider_value = map[string]int32{
		"IDENTITY_PROVIDER_UNSPECIFIED": 0,
		"IDENTITY_PROVIDER_GOOGLE":      1,
		"IDENTITY_PROVIDER_GITHUB":      2,
	}
)

func (x IdentityProvider) Enum() *IdentityProvider {
	p := new(IdentityProvider)
	*p = x
	return p
}

func (x IdentityProvider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdentityProvider) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_v1_auth_proto_enumTypes[0].Descriptor()
}

func (IdentityProvider) Type() protoreflect.EnumType {
	return &file_proto_auth_v1_auth_proto_enumTypes[0]
}

func (x IdentityProvider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdentityProvider.Descriptor instead.
func (IdentityProvider) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{0}
}

// Token types
type TokenType int32

const (
	TokenType_TOKEN_TYPE_UNSPECIFIED TokenType = 0
	TokenType_TOKEN_TYPE_ACCESS      TokenType = 1
	TokenType_TOKEN_TYPE_REFRESH     TokenType = 2
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0: "TOKEN_TYPE_UNSPECIFIED",
		1: "TOKEN_TYPE_ACCESS",
		2: "TOKEN_TYPE_REFRESH",
	}
	TokenType_value = map[string]int32{
		"TOKEN_TYPE_UNSPECIFIED": 0,
		"TOKEN_TYPE_ACCESS":      1,
		"TOKEN_TYPE_REFRESH":     2,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_v1_auth_proto_enumTypes[1].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_proto_auth_v1_auth_proto_enumTypes[1]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{1}
}

// MFA methods
type MFAMethod int32

const (
	MFAMethod_MFA_METHOD_UNSPECIFIED MFAMethod = 0
	MFAMethod_MFA_METHOD_TOTP        MFAMethod = 1 // Time-based One-Time Password
	MFAMethod_MFA_METHOD_SMS         MFAMethod = 2 // SMS verification
	MFAMethod_MFA_METHOD_EMAIL       MFAMethod = 3 // Email verification
)

// Enum value maps for MFAMethod.
var (
	MFAMethod_name = map[int32]string{
		0: "MFA_METHOD_UNSPECIFIED",
		1: "MFA_METHOD_TOTP",
		2: "MFA_METHOD_SMS",
		3: "MFA_METHOD_EMAIL",
	}
	MFAMethod_value = map[string]int32{
		"MFA_METHOD_UNSPECIFIED": 0,
		"MFA_METHOD_TOTP":        1,
		"MFA_METHOD_SMS":         2,
		"MFA_METHOD_EMAIL":       3,
	}
)

func (x MFAMethod) Enum() *MFAMethod {
	p := new(MFAMethod)
	*p = x
	return p
}

func (x MFAMethod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MFAMethod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_v1_auth_proto_enumTypes[2].Descriptor()
}

func (MFAMethod) Type() protoreflect.EnumType {
	return &file_proto_auth_v1_auth_proto_enumTypes[2]
}

func (x MFAMethod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MFAMethod.Descriptor instead.
func (MFAMethod) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{2}
}

// MFA status values
type MFAStatus int32

const (
	MFAStatus_MFA_STATUS_UNSPECIFIED MFAStatus = 0
	MFAStatus_MFA_STATUS_DISABLED    MFAStatus = 1 // MFA is not enabled
	MFAStatus_MFA_STATUS_ENABLED     MFAStatus = 2 // MFA is enabled
	MFAStatus_MFA_STATUS_REQUIRED    MFAStatus = 3 // MFA is required for this user
)

// Enum value maps for MFAStatus.
var (
	MFAStatus_name = map[int32]string{
		0: "MFA_STATUS_UNSPECIFIED",
		1: "MFA_STATUS_DISABLED",
		2: "MFA_STATUS_ENABLED",
		3: "MFA_STATUS_REQUIRED",
	}
	MFAStatus_value = map[string]int32{
		"MFA_STATUS_UNSPECIFIED": 0,
		"MFA_STATUS_DISABLED":    1,
		"MFA_STATUS_ENABLED":     2,
		"MFA_STATUS_REQUIRED":    3,
	}
)

func (x MFAStatus) Enum() *MFAStatus {
	p := new(MFAStatus)
	*p = x
	return p
}

func (x MFAStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MFAStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_v1_auth_proto_enumTypes[3].Descriptor()
}

func (MFAStatus) Type() protoreflect.EnumType {
	return &file_proto_auth_v1_auth_proto_enumTypes[3]
}

func (x MFAStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MFAStatus.Descriptor instead.
func (MFAStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{3}
}

// Error code enumeration
type ErrorCode int32

const (
	ErrorCode_ERROR_UNSPECIFIED            ErrorCode = 0
	ErrorCode_ERROR_INVALID_TOKEN          ErrorCode = 1
	ErrorCode_ERROR_TOKEN_EXPIRED          ErrorCode = 2
	ErrorCode_ERROR_INVALID_REQUEST        ErrorCode = 3
	ErrorCode_ERROR_PROVIDER_NOT_SUPPORTED ErrorCode = 4
	ErrorCode_ERROR_MFA_REQUIRED           ErrorCode = 5
	ErrorCode_ERROR_MFA_INVALID            ErrorCode = 6
	ErrorCode_ERROR_SERVER_ERROR           ErrorCode = 7
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0: "ERROR_UNSPECIFIED",
		1: "ERROR_INVALID_TOKEN",
		2: "ERROR_TOKEN_EXPIRED",
		3: "ERROR_INVALID_REQUEST",
		4: "ERROR_PROVIDER_NOT_SUPPORTED",
		5: "ERROR_MFA_REQUIRED",
		6: "ERROR_MFA_INVALID",
		7: "ERROR_SERVER_ERROR",
	}
	ErrorCode_value = map[string]int32{
		"ERROR_UNSPECIFIED":            0,
		"ERROR_INVALID_TOKEN":          1,
		"ERROR_TOKEN_EXPIRED":          2,
		"ERROR_INVALID_REQUEST":        3,
		"ERROR_PROVIDER_NOT_SUPPORTED": 4,
		"ERROR_MFA_REQUIRED":           5,
		"ERROR_MFA_INVALID":            6,
		"ERROR_SERVER_ERROR":           7,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_auth_v1_auth_proto_enumTypes[4].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_auth_v1_auth_proto_enumTypes[4]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{4}
}

// Request to generate an OAuth2.0 authorization URL
type GenerateAuthorizationURLRequest struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Provider            IdentityProvider       `protobuf:"varint,1,opt,name=provider,proto3,enum=auth.v1.IdentityProvider" json:"provider,omitempty"`                                      // Identity provider to use
	State               string                 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`                                                                           // CSRF protection state
	RedirectUri         string                 `protobuf:"bytes,3,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`                                            // OAuth2.0 redirect URI
	CodeChallenge       string                 `protobuf:"bytes,4,opt,name=code_challenge,json=codeChallenge,proto3" json:"code_challenge,omitempty"`                                      // PKCE code challenge
	CodeChallengeMethod string                 `protobuf:"bytes,5,opt,name=code_challenge_method,json=codeChallengeMethod,proto3" json:"code_challenge_method,omitempty"`                  // PKCE code challenge method
	Scope               []string               `protobuf:"bytes,6,rep,name=scope,proto3" json:"scope,omitempty"`                                                                           // Requested OAuth2.0 scopes
	Extra               map[string]string      `protobuf:"bytes,7,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional provider-specific parameters
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *GenerateAuthorizationURLRequest) Reset() {
	*x = GenerateAuthorizationURLRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAuthorizationURLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAuthorizationURLRequest) ProtoMessage() {}

func (x *GenerateAuthorizationURLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAuthorizationURLRequest.ProtoReflect.Descriptor instead.
func (*GenerateAuthorizationURLRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{0}
}

func (x *GenerateAuthorizationURLRequest) GetProvider() IdentityProvider {
	if x != nil {
		return x.Provider
	}
	return IdentityProvider_IDENTITY_PROVIDER_UNSPECIFIED
}

func (x *GenerateAuthorizationURLRequest) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GenerateAuthorizationURLRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *GenerateAuthorizationURLRequest) GetCodeChallenge() string {
	if x != nil {
		return x.CodeChallenge
	}
	return ""
}

func (x *GenerateAuthorizationURLRequest) GetCodeChallengeMethod() string {
	if x != nil {
		return x.CodeChallengeMethod
	}
	return ""
}

func (x *GenerateAuthorizationURLRequest) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *GenerateAuthorizationURLRequest) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

type GenerateAuthorizationURLResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"` // Generated authorization URL
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerateAuthorizationURLResponse) Reset() {
	*x = GenerateAuthorizationURLResponse{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerateAuthorizationURLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateAuthorizationURLResponse) ProtoMessage() {}

func (x *GenerateAuthorizationURLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateAuthorizationURLResponse.ProtoReflect.Descriptor instead.
func (*GenerateAuthorizationURLResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{1}
}

func (x *GenerateAuthorizationURLResponse) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Request to exchange authorization code for tokens
type ExchangeAuthorizationCodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          string                 `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`                                        // Authorization code from OAuth provider
	RedirectUri   string                 `protobuf:"bytes,2,opt,name=redirect_uri,json=redirectUri,proto3" json:"redirect_uri,omitempty"`       // Must match the original redirect URI
	CodeVerifier  string                 `protobuf:"bytes,3,opt,name=code_verifier,json=codeVerifier,proto3" json:"code_verifier,omitempty"`    // PKCE code verifier
	Provider      IdentityProvider       `protobuf:"varint,4,opt,name=provider,proto3,enum=auth.v1.IdentityProvider" json:"provider,omitempty"` // Identity provider used
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExchangeAuthorizationCodeRequest) Reset() {
	*x = ExchangeAuthorizationCodeRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExchangeAuthorizationCodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeAuthorizationCodeRequest) ProtoMessage() {}

func (x *ExchangeAuthorizationCodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeAuthorizationCodeRequest.ProtoReflect.Descriptor instead.
func (*ExchangeAuthorizationCodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{2}
}

func (x *ExchangeAuthorizationCodeRequest) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ExchangeAuthorizationCodeRequest) GetRedirectUri() string {
	if x != nil {
		return x.RedirectUri
	}
	return ""
}

func (x *ExchangeAuthorizationCodeRequest) GetCodeVerifier() string {
	if x != nil {
		return x.CodeVerifier
	}
	return ""
}

func (x *ExchangeAuthorizationCodeRequest) GetProvider() IdentityProvider {
	if x != nil {
		return x.Provider
	}
	return IdentityProvider_IDENTITY_PROVIDER_UNSPECIFIED
}

// Common token response format
type TokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`                   // JWT access token
	RefreshToken  string                 `protobuf:"bytes,2,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"`                // Refresh token (if requested)
	ExpiresIn     int64                  `protobuf:"varint,3,opt,name=expires_in,json=expiresIn,proto3" json:"expires_in,omitempty"`                        // Token expiration in seconds
	TokenType     string                 `protobuf:"bytes,4,opt,name=token_type,json=tokenType,proto3" json:"token_type,omitempty"`                         // Token type (usually "Bearer")
	Scope         []string               `protobuf:"bytes,5,rep,name=scope,proto3" json:"scope,omitempty"`                                                  // Granted scopes
	MfaStatus     MFAStatus              `protobuf:"varint,6,opt,name=mfa_status,json=mfaStatus,proto3,enum=auth.v1.MFAStatus" json:"mfa_status,omitempty"` // Current MFA status
	MfaToken      string                 `protobuf:"bytes,7,opt,name=mfa_token,json=mfaToken,proto3" json:"mfa_token,omitempty"`                            // MFA token (if MFA is required)
	IdToken       string                 `protobuf:"bytes,8,opt,name=id_token,json=idToken,proto3" json:"id_token,omitempty"`                               // OpenID Connect ID token (if requested)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{3}
}

func (x *TokenResponse) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *TokenResponse) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *TokenResponse) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

func (x *TokenResponse) GetTokenType() string {
	if x != nil {
		return x.TokenType
	}
	return ""
}

func (x *TokenResponse) GetScope() []string {
	if x != nil {
		return x.Scope
	}
	return nil
}

func (x *TokenResponse) GetMfaStatus() MFAStatus {
	if x != nil {
		return x.MfaStatus
	}
	return MFAStatus_MFA_STATUS_UNSPECIFIED
}

func (x *TokenResponse) GetMfaToken() string {
	if x != nil {
		return x.MfaToken
	}
	return ""
}

func (x *TokenResponse) GetIdToken() string {
	if x != nil {
		return x.IdToken
	}
	return ""
}

// Token verification request
type VerifyTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"` // Token to verify
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyTokenRequest) Reset() {
	*x = VerifyTokenRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTokenRequest) ProtoMessage() {}

func (x *VerifyTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTokenRequest.ProtoReflect.Descriptor instead.
func (*VerifyTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{4}
}

func (x *VerifyTokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// Token verification response
type VerifyTokenResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsValid       bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`                // Whether the token is valid
	Scopes        []string               `protobuf:"bytes,2,rep,name=scopes,proto3" json:"scopes,omitempty"`                                  // Token's granted scopes
	ExpiresAt     int64                  `protobuf:"varint,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`          // Token expiration timestamp
	MfaCompleted  bool                   `protobuf:"varint,4,opt,name=mfa_completed,json=mfaCompleted,proto3" json:"mfa_completed,omitempty"` // Whether MFA is completed for this token
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VerifyTokenResponse) Reset() {
	*x = VerifyTokenResponse{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VerifyTokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTokenResponse) ProtoMessage() {}

func (x *VerifyTokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTokenResponse.ProtoReflect.Descriptor instead.
func (*VerifyTokenResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{5}
}

func (x *VerifyTokenResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

func (x *VerifyTokenResponse) GetScopes() []string {
	if x != nil {
		return x.Scopes
	}
	return nil
}

func (x *VerifyTokenResponse) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

func (x *VerifyTokenResponse) GetMfaCompleted() bool {
	if x != nil {
		return x.MfaCompleted
	}
	return false
}

// Token refresh request
type RefreshTokenRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	RefreshToken  string                 `protobuf:"bytes,1,opt,name=refresh_token,json=refreshToken,proto3" json:"refresh_token,omitempty"` // Refresh token to use
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RefreshTokenRequest) Reset() {
	*x = RefreshTokenRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RefreshTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RefreshTokenRequest) ProtoMessage() {}

func (x *RefreshTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RefreshTokenRequest.ProtoReflect.Descriptor instead.
func (*RefreshTokenRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{6}
}

func (x *RefreshTokenRequest) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

// User information request
type GetUserInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // Access token for authentication
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserInfoRequest) Reset() {
	*x = GetUserInfoRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserInfoRequest) ProtoMessage() {}

func (x *GetUserInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserInfoRequest.ProtoReflect.Descriptor instead.
func (*GetUserInfoRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserInfoRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// User information response
type UserInfoResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                                       // Unique user identifier
	Email         string                 `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`                                                                                 // User's email address
	EmailVerified bool                   `protobuf:"varint,3,opt,name=email_verified,json=emailVerified,proto3" json:"email_verified,omitempty"`                                           // Whether email is verified
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`                                                                                   // User's full name
	Roles         []string               `protobuf:"bytes,5,rep,name=roles,proto3" json:"roles,omitempty"`                                                                                 // User's roles/permissions
	Provider      IdentityProvider       `protobuf:"varint,6,opt,name=provider,proto3,enum=auth.v1.IdentityProvider" json:"provider,omitempty"`                                            // Identity provider used
	MfaInfo       *MFAInfo               `protobuf:"bytes,7,opt,name=mfa_info,json=mfaInfo,proto3" json:"mfa_info,omitempty"`                                                              // MFA configuration
	Metadata      map[string]string      `protobuf:"bytes,8,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Additional user metadata
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserInfoResponse) Reset() {
	*x = UserInfoResponse{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserInfoResponse) ProtoMessage() {}

func (x *UserInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserInfoResponse.ProtoReflect.Descriptor instead.
func (*UserInfoResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{8}
}

func (x *UserInfoResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserInfoResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserInfoResponse) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *UserInfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserInfoResponse) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UserInfoResponse) GetProvider() IdentityProvider {
	if x != nil {
		return x.Provider
	}
	return IdentityProvider_IDENTITY_PROVIDER_UNSPECIFIED
}

func (x *UserInfoResponse) GetMfaInfo() *MFAInfo {
	if x != nil {
		return x.MfaInfo
	}
	return nil
}

func (x *UserInfoResponse) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// MFA status request
type GetMFAStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // Access token for authentication
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMFAStatusRequest) Reset() {
	*x = GetMFAStatusRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMFAStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMFAStatusRequest) ProtoMessage() {}

func (x *GetMFAStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMFAStatusRequest.ProtoReflect.Descriptor instead.
func (*GetMFAStatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{9}
}

func (x *GetMFAStatusRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

// MFA information structure
type MFAInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Status         MFAStatus              `protobuf:"varint,1,opt,name=status,proto3,enum=auth.v1.MFAStatus" json:"status,omitempty"`                                              // Current MFA status
	EnabledMethods []MFAMethod            `protobuf:"varint,2,rep,packed,name=enabled_methods,json=enabledMethods,proto3,enum=auth.v1.MFAMethod" json:"enabled_methods,omitempty"` // Enabled MFA methods
	DefaultMethod  MFAMethod              `protobuf:"varint,3,opt,name=default_method,json=defaultMethod,proto3,enum=auth.v1.MFAMethod" json:"default_method,omitempty"`           // Default MFA method
	LastVerifiedAt int64                  `protobuf:"varint,4,opt,name=last_verified_at,json=lastVerifiedAt,proto3" json:"last_verified_at,omitempty"`                             // Last MFA verification timestamp
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *MFAInfo) Reset() {
	*x = MFAInfo{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MFAInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MFAInfo) ProtoMessage() {}

func (x *MFAInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MFAInfo.ProtoReflect.Descriptor instead.
func (*MFAInfo) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{10}
}

func (x *MFAInfo) GetStatus() MFAStatus {
	if x != nil {
		return x.Status
	}
	return MFAStatus_MFA_STATUS_UNSPECIFIED
}

func (x *MFAInfo) GetEnabledMethods() []MFAMethod {
	if x != nil {
		return x.EnabledMethods
	}
	return nil
}

func (x *MFAInfo) GetDefaultMethod() MFAMethod {
	if x != nil {
		return x.DefaultMethod
	}
	return MFAMethod_MFA_METHOD_UNSPECIFIED
}

func (x *MFAInfo) GetLastVerifiedAt() int64 {
	if x != nil {
		return x.LastVerifiedAt
	}
	return 0
}

// MFA status response
type GetMFAStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	MfaInfo       *MFAInfo               `protobuf:"bytes,1,opt,name=mfa_info,json=mfaInfo,proto3" json:"mfa_info,omitempty"` // MFA configuration and status
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMFAStatusResponse) Reset() {
	*x = GetMFAStatusResponse{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMFAStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMFAStatusResponse) ProtoMessage() {}

func (x *GetMFAStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMFAStatusResponse.ProtoReflect.Descriptor instead.
func (*GetMFAStatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{11}
}

func (x *GetMFAStatusResponse) GetMfaInfo() *MFAInfo {
	if x != nil {
		return x.MfaInfo
	}
	return nil
}

// MFA challenge completion request
type CompleteMFAChallengeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AccessToken   string                 `protobuf:"bytes,1,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"` // Current access token
	MfaToken      string                 `protobuf:"bytes,2,opt,name=mfa_token,json=mfaToken,proto3" json:"mfa_token,omitempty"`          // MFA challenge token
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompleteMFAChallengeRequest) Reset() {
	*x = CompleteMFAChallengeRequest{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompleteMFAChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompleteMFAChallengeRequest) ProtoMessage() {}

func (x *CompleteMFAChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompleteMFAChallengeRequest.ProtoReflect.Descriptor instead.
func (*CompleteMFAChallengeRequest) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{12}
}

func (x *CompleteMFAChallengeRequest) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *CompleteMFAChallengeRequest) GetMfaToken() string {
	if x != nil {
		return x.MfaToken
	}
	return ""
}

// Error details
type Error struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Code          ErrorCode              `protobuf:"varint,1,opt,name=code,proto3,enum=auth.v1.ErrorCode" json:"code,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details       map[string]string      `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_proto_auth_v1_auth_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_proto_auth_v1_auth_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_proto_auth_v1_auth_proto_rawDescGZIP(), []int{13}
}

func (x *Error) GetCode() ErrorCode {
	if x != nil {
		return x.Code
	}
	return ErrorCode_ERROR_UNSPECIFIED
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

var File_proto_auth_v1_auth_proto protoreflect.FileDescriptor

var file_proto_auth_v1_auth_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x2f,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x22, 0x87, 0x03, 0x0a, 0x1f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x75, 0x72, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x32,
	0x0a, 0x15, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x63,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x49, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x65, 0x78,
	0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x34, 0x0a,
	0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0xb5, 0x01, 0x0a, 0x20, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x69, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x64, 0x65, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x96, 0x02, 0x0a, 0x0d,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x49, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6d, 0x66, 0x61,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x09, 0x6d, 0x66, 0x61, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6d, 0x66, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6d, 0x66, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x64, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2a, 0x0a, 0x12, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x8c, 0x01, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x66,
	0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x6d, 0x66, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22,
	0x3a, 0x0a, 0x13, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73,
	0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x37, 0x0a, 0x12, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xef, 0x02, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x25, 0x0a, 0x0e, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x12, 0x35, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x66, 0x61, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x46, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x66, 0x61,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x38, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4d, 0x46, 0x41,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0xd7, 0x01, 0x0a, 0x07, 0x4d, 0x46, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3b, 0x0a, 0x0f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x46, 0x41, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x46, 0x41, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x52, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x22, 0x43, 0x0a, 0x14, 0x47, 0x65,
	0x74, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x66, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x46, 0x41, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6d, 0x66, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x5d, 0x0a, 0x1b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x43, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x66, 0x61, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x66, 0x61, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xbc,
	0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x71, 0x0a,
	0x10, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50, 0x52,
	0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x4f, 0x4f, 0x47, 0x4c, 0x45,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x47, 0x49, 0x54, 0x48, 0x55, 0x42, 0x10, 0x02,
	0x2a, 0x56, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x4b,
	0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52,
	0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x10, 0x02, 0x2a, 0x66, 0x0a, 0x09, 0x4d, 0x46, 0x41, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x16, 0x4d, 0x46, 0x41, 0x5f, 0x4d, 0x45, 0x54,
	0x48, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x46, 0x41, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f,
	0x54, 0x4f, 0x54, 0x50, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x46, 0x41, 0x5f, 0x4d, 0x45,
	0x54, 0x48, 0x4f, 0x44, 0x5f, 0x53, 0x4d, 0x53, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x46,
	0x41, 0x5f, 0x4d, 0x45, 0x54, 0x48, 0x4f, 0x44, 0x5f, 0x45, 0x4d, 0x41, 0x49, 0x4c, 0x10, 0x03,
	0x2a, 0x71, 0x0a, 0x09, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x16, 0x4d, 0x46, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46, 0x41,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x46, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x4d, 0x46,
	0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x03, 0x2a, 0xd8, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10,
	0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e,
	0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55,
	0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x15, 0x0a, 0x11, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x46, 0x41, 0x5f, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x32, 0xf0,
	0x04, 0x0a, 0x15, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x71, 0x0a, 0x18, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x52, 0x4c, 0x12, 0x28, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x52,
	0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x19, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x29, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a,
	0x0b, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1b, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x75, 0x74,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x46, 0x41, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x12, 0x24, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x46, 0x41, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x47, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x54, 0x61, 0x6b, 0x61, 0x79, 0x75, 0x6b, 0x69, 0x2d, 0x59, 0x35, 0x39, 0x39, 0x31, 0x2f, 0x67,
	0x6f, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x76, 0x31, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_proto_auth_v1_auth_proto_rawDescOnce sync.Once
	file_proto_auth_v1_auth_proto_rawDescData = file_proto_auth_v1_auth_proto_rawDesc
)

func file_proto_auth_v1_auth_proto_rawDescGZIP() []byte {
	file_proto_auth_v1_auth_proto_rawDescOnce.Do(func() {
		file_proto_auth_v1_auth_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_auth_v1_auth_proto_rawDescData)
	})
	return file_proto_auth_v1_auth_proto_rawDescData
}

var file_proto_auth_v1_auth_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_proto_auth_v1_auth_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_proto_auth_v1_auth_proto_goTypes = []any{
	(IdentityProvider)(0),                    // 0: auth.v1.IdentityProvider
	(TokenType)(0),                           // 1: auth.v1.TokenType
	(MFAMethod)(0),                           // 2: auth.v1.MFAMethod
	(MFAStatus)(0),                           // 3: auth.v1.MFAStatus
	(ErrorCode)(0),                           // 4: auth.v1.ErrorCode
	(*GenerateAuthorizationURLRequest)(nil),  // 5: auth.v1.GenerateAuthorizationURLRequest
	(*GenerateAuthorizationURLResponse)(nil), // 6: auth.v1.GenerateAuthorizationURLResponse
	(*ExchangeAuthorizationCodeRequest)(nil), // 7: auth.v1.ExchangeAuthorizationCodeRequest
	(*TokenResponse)(nil),                    // 8: auth.v1.TokenResponse
	(*VerifyTokenRequest)(nil),               // 9: auth.v1.VerifyTokenRequest
	(*VerifyTokenResponse)(nil),              // 10: auth.v1.VerifyTokenResponse
	(*RefreshTokenRequest)(nil),              // 11: auth.v1.RefreshTokenRequest
	(*GetUserInfoRequest)(nil),               // 12: auth.v1.GetUserInfoRequest
	(*UserInfoResponse)(nil),                 // 13: auth.v1.UserInfoResponse
	(*GetMFAStatusRequest)(nil),              // 14: auth.v1.GetMFAStatusRequest
	(*MFAInfo)(nil),                          // 15: auth.v1.MFAInfo
	(*GetMFAStatusResponse)(nil),             // 16: auth.v1.GetMFAStatusResponse
	(*CompleteMFAChallengeRequest)(nil),      // 17: auth.v1.CompleteMFAChallengeRequest
	(*Error)(nil),                            // 18: auth.v1.Error
	nil,                                      // 19: auth.v1.GenerateAuthorizationURLRequest.ExtraEntry
	nil,                                      // 20: auth.v1.UserInfoResponse.MetadataEntry
	nil,                                      // 21: auth.v1.Error.DetailsEntry
}
var file_proto_auth_v1_auth_proto_depIdxs = []int32{
	0,  // 0: auth.v1.GenerateAuthorizationURLRequest.provider:type_name -> auth.v1.IdentityProvider
	19, // 1: auth.v1.GenerateAuthorizationURLRequest.extra:type_name -> auth.v1.GenerateAuthorizationURLRequest.ExtraEntry
	0,  // 2: auth.v1.ExchangeAuthorizationCodeRequest.provider:type_name -> auth.v1.IdentityProvider
	3,  // 3: auth.v1.TokenResponse.mfa_status:type_name -> auth.v1.MFAStatus
	0,  // 4: auth.v1.UserInfoResponse.provider:type_name -> auth.v1.IdentityProvider
	15, // 5: auth.v1.UserInfoResponse.mfa_info:type_name -> auth.v1.MFAInfo
	20, // 6: auth.v1.UserInfoResponse.metadata:type_name -> auth.v1.UserInfoResponse.MetadataEntry
	3,  // 7: auth.v1.MFAInfo.status:type_name -> auth.v1.MFAStatus
	2,  // 8: auth.v1.MFAInfo.enabled_methods:type_name -> auth.v1.MFAMethod
	2,  // 9: auth.v1.MFAInfo.default_method:type_name -> auth.v1.MFAMethod
	15, // 10: auth.v1.GetMFAStatusResponse.mfa_info:type_name -> auth.v1.MFAInfo
	4,  // 11: auth.v1.Error.code:type_name -> auth.v1.ErrorCode
	21, // 12: auth.v1.Error.details:type_name -> auth.v1.Error.DetailsEntry
	5,  // 13: auth.v1.AuthenticationService.GenerateAuthorizationURL:input_type -> auth.v1.GenerateAuthorizationURLRequest
	7,  // 14: auth.v1.AuthenticationService.ExchangeAuthorizationCode:input_type -> auth.v1.ExchangeAuthorizationCodeRequest
	9,  // 15: auth.v1.AuthenticationService.VerifyToken:input_type -> auth.v1.VerifyTokenRequest
	11, // 16: auth.v1.AuthenticationService.RefreshToken:input_type -> auth.v1.RefreshTokenRequest
	12, // 17: auth.v1.AuthenticationService.GetUserInfo:input_type -> auth.v1.GetUserInfoRequest
	14, // 18: auth.v1.AuthenticationService.GetMFAStatus:input_type -> auth.v1.GetMFAStatusRequest
	17, // 19: auth.v1.AuthenticationService.CompleteMFAChallenge:input_type -> auth.v1.CompleteMFAChallengeRequest
	6,  // 20: auth.v1.AuthenticationService.GenerateAuthorizationURL:output_type -> auth.v1.GenerateAuthorizationURLResponse
	8,  // 21: auth.v1.AuthenticationService.ExchangeAuthorizationCode:output_type -> auth.v1.TokenResponse
	10, // 22: auth.v1.AuthenticationService.VerifyToken:output_type -> auth.v1.VerifyTokenResponse
	8,  // 23: auth.v1.AuthenticationService.RefreshToken:output_type -> auth.v1.TokenResponse
	13, // 24: auth.v1.AuthenticationService.GetUserInfo:output_type -> auth.v1.UserInfoResponse
	16, // 25: auth.v1.AuthenticationService.GetMFAStatus:output_type -> auth.v1.GetMFAStatusResponse
	8,  // 26: auth.v1.AuthenticationService.CompleteMFAChallenge:output_type -> auth.v1.TokenResponse
	20, // [20:27] is the sub-list for method output_type
	13, // [13:20] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_proto_auth_v1_auth_proto_init() }
func file_proto_auth_v1_auth_proto_init() {
	if File_proto_auth_v1_auth_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_auth_v1_auth_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_auth_v1_auth_proto_goTypes,
		DependencyIndexes: file_proto_auth_v1_auth_proto_depIdxs,
		EnumInfos:         file_proto_auth_v1_auth_proto_enumTypes,
		MessageInfos:      file_proto_auth_v1_auth_proto_msgTypes,
	}.Build()
	File_proto_auth_v1_auth_proto = out.File
	file_proto_auth_v1_auth_proto_rawDesc = nil
	file_proto_auth_v1_auth_proto_goTypes = nil
	file_proto_auth_v1_auth_proto_depIdxs = nil
}
