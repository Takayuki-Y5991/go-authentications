syntax = "proto3";

package auth.v1;

option go_package = "your-project-name/gen/auth/v1;authv1";

// AuthenticationService handles all authentication related operations
service AuthenticationService {
  // OAuth2.0 authorization code flow
  rpc ExchangeAuthorizationCode(ExchangeAuthorizationCodeRequest) returns (TokenResponse) {}
  
  // Token operations
  rpc VerifyToken(VerifyTokenRequest) returns (VerifyTokenResponse) {}
  rpc RefreshToken(RefreshTokenRequest) returns (TokenResponse) {}
  rpc RevokeToken(RevokeTokenRequest) returns (RevokeTokenResponse) {}
  
  // User information
  rpc GetUserInfo(GetUserInfoRequest) returns (UserInfoResponse) {}
  
  // MFA operations
  rpc InitiateMFA(InitiateMFARequest) returns (InitiateMFAResponse) {}
  rpc VerifyMFAChallenge(VerifyMFAChallengeRequest) returns (VerifyMFAChallengeResponse) {}
  rpc GetMFAStatus(GetMFAStatusRequest) returns (GetMFAStatusResponse) {}
}

// Request/Response messages for authorization code flow
message ExchangeAuthorizationCodeRequest {
  string code = 1;                    // Authorization code from OAuth provider
  string redirect_uri = 2;            // Redirect URI used in the authorization request
  string code_verifier = 3;           // PKCE code verifier
  string state = 4;                   // State parameter for CSRF protection
  IdentityProvider provider = 5;      // Identity provider used for authentication
}

message TokenResponse {
  string access_token = 1;
  string refresh_token = 2;
  int64 expires_in = 3;
  string token_type = 4;              // Always "Bearer"
  string id_token = 5;                // OpenID Connect ID token
  repeated string scope = 6;
  bool mfa_required = 7;              // Indicates if MFA is required
  string mfa_token = 8;               // Token for MFA flow if required
}

// Token verification
message VerifyTokenRequest {
  string token = 1;
}

message VerifyTokenResponse {
  bool is_valid = 1;
  repeated string scopes = 2;
  int64 expires_at = 3;
  TokenType token_type = 4;
  bool mfa_verified = 5;              // Whether MFA verification is complete
}

// Token refresh
message RefreshTokenRequest {
  string refresh_token = 1;
  repeated string scope = 2;          // Optional requested scopes
}

// Token revocation
message RevokeTokenRequest {
  string token = 1;
  TokenType token_type = 2;
}

message RevokeTokenResponse {
  bool revoked = 1;
}

// User information
message GetUserInfoRequest {
  string access_token = 1;
}

message UserInfoResponse {
  string subject = 1;                 // Unique identifier
  string email = 2;
  bool email_verified = 3;
  string name = 4;
  repeated string roles = 5;
  IdentityProvider provider = 6;      // Identity provider used
  string provider_user_id = 7;        // User ID from the provider
  MFAStatus mfa_status = 8;          // Current MFA status
}

// MFA related messages
message InitiateMFARequest {
  string access_token = 1;
  MFAMethod method = 2;
}

message InitiateMFAResponse {
  string challenge_id = 1;
  int64 expires_at = 2;
  MFAMethod method = 3;
  string delivery_destination = 4;    // Masked phone/email where code was sent
}

message VerifyMFAChallengeRequest {
  string challenge_id = 1;
  string code = 2;
  string mfa_token = 3;
}

message VerifyMFAChallengeResponse {
  bool verified = 1;
  string access_token = 2;            // New access token with MFA claim
}

message GetMFAStatusRequest {
  string access_token = 1;
}

message GetMFAStatusResponse {
  bool enabled = 1;
  repeated MFAMethod available_methods = 2;
  MFAMethod default_method = 3;
}

// Enums
enum IdentityProvider {
  IDENTITY_PROVIDER_UNSPECIFIED = 0;
  IDENTITY_PROVIDER_GOOGLE = 1;
  IDENTITY_PROVIDER_GITHUB = 2;
}

enum TokenType {
  TOKEN_TYPE_UNSPECIFIED = 0;
  TOKEN_TYPE_ACCESS = 1;
  TOKEN_TYPE_REFRESH = 2;
  TOKEN_TYPE_MFA = 3;
}

enum MFAMethod {
  MFA_METHOD_UNSPECIFIED = 0;
  MFA_METHOD_TOTP = 1;               // Time-based One-Time Password
  MFA_METHOD_SMS = 2;
  MFA_METHOD_EMAIL = 3;
}

enum MFAStatus {
  MFA_STATUS_UNSPECIFIED = 0;
  MFA_STATUS_DISABLED = 1;
  MFA_STATUS_ENABLED = 2;
  MFA_STATUS_REQUIRED = 3;           // MFA is mandatory for this user
}

// Error handling
message AuthError {
  ErrorCode code = 1;
  string message = 2;
  map<string, string> details = 3;
}

enum ErrorCode {
  ERROR_UNSPECIFIED = 0;
  ERROR_INVALID_TOKEN = 1;
  ERROR_TOKEN_EXPIRED = 2;
  ERROR_INVALID_GRANT = 3;
  ERROR_INVALID_REQUEST = 4;
  ERROR_UNAUTHORIZED_CLIENT = 5;
  ERROR_INVALID_SCOPE = 6;
  ERROR_MFA_REQUIRED = 7;
  ERROR_MFA_INVALID = 8;
  ERROR_MFA_EXPIRED = 9;
  ERROR_PROVIDER_NOT_SUPPORTED = 10;
  ERROR_SERVER_ERROR = 11;
}